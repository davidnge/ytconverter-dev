<div class="max-w-2xl mx-auto" data-controller="conversion-status" data-conversion-status-id-value="<%= @conversion.id %>">
  <div class="bg-white shadow-md rounded-lg p-6 mb-4">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Converting Your Video</h2>
    
    <div class="mb-6">
      <div class="text-sm font-medium text-gray-700 mb-1">Status:</div>
      <div class="text-indigo-600 font-medium" data-conversion-status-target="statusText">
        <%= @conversion.status.present? ? @conversion.status.capitalize : 'Pending' %>
      </div>
      
      <% if @conversion.status == 'pending' || @conversion.status == 'processing' %>
        <div class="mt-3">
          <div class="w-full bg-gray-200 rounded-full h-2.5 overflow-hidden">
            <div id="progress-bar"
                 class="bg-indigo-600 h-2.5 rounded-full transition-all duration-300 ease-out"
                 style="width: <%= @conversion.status == 'pending' ? '5%' : '40%' %>;"
                 data-conversion-status-target="progressBar"></div>
          </div>
          <div class="text-xs text-gray-500 mt-1">
            <%= @conversion.status == 'pending' ? 'Starting conversion...' : 'Converting your audio...' %>
          </div>
        </div>
      <% end %>
    </div>
    
    <div data-conversion-status-target="details" class="<%= 'hidden' unless @conversion.title %>">
      <div class="border rounded-md p-4 mb-4">
        <div class="mb-2">
          <div class="text-sm font-medium text-gray-700">Video Title:</div>
          <div data-conversion-status-target="title"><%= @conversion.title %></div>
        </div>
        
        <div class="mb-2">
          <div class="text-sm font-medium text-gray-700">Duration:</div>
          <div data-conversion-status-target="duration"><%= @conversion.formatted_duration %></div>
        </div>
        
        <div>
          <div class="text-sm font-medium text-gray-700">Quality:</div>
          <div><%= @conversion.quality %> kbps</div>
        </div>
      </div>
    </div>
    
    <div data-conversion-status-target="downloadButton" class="<%= 'hidden' unless @conversion.status == 'completed' %>">
      <%= link_to "Download MP3", download_conversion_path(@conversion), class: "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" %>
    </div>
    
    <div data-conversion-status-target="errorMessage" class="<%= 'hidden' unless @conversion.status == 'failed' %>">
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
        <p><strong>Error:</strong> <span data-conversion-status-target="errorText"><%= @conversion.error_message %></span></p>
        <p class="mt-2">Please try again with a different video.</p>
      </div>
    </div>
    
    <div class="mt-4 text-center">
      <%= link_to "Convert Another Video", root_path, class: "text-indigo-600 hover:text-indigo-800" %>
    </div>
  </div>
</div>

<!-- Combined script for progress bar and fallback mechanisms -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Check if conversion is already complete and update UI accordingly
    <% if @conversion.status == 'completed' %>
      console.log("Conversion is already complete");
      const downloadButton = document.querySelector('[data-conversion-status-target="downloadButton"]');
      if (downloadButton) downloadButton.classList.remove('hidden');
      const detailsPanel = document.querySelector('[data-conversion-status-target="details"]');
      if (detailsPanel) detailsPanel.classList.remove('hidden');
      const progressBar = document.getElementById('progress-bar');
      if (progressBar) progressBar.style.width = '100%';
    <% end %>
    
    // Animate progress bar for pending/processing states
    <% if @conversion.status == 'pending' || @conversion.status == 'processing' %>
      const progressBar = document.getElementById('progress-bar');
      if (progressBar) {
        let width = parseInt(progressBar.style.width) || 5;
        const targetWidth = '<%= @conversion.status %>' === 'pending' ? 30 : 75;
        
        const interval = setInterval(() => {
          if (width >= targetWidth) {
            clearInterval(interval);
          } else {
            width += 1;
            progressBar.style.width = width + '%';
          }
        }, 200);
      }
      
      // Fallback: Auto-refresh page after 30 seconds if still processing
      setTimeout(function() {
        const status = document.querySelector('[data-conversion-status-target="statusText"]').textContent.toLowerCase();
        if (status === 'pending' || status === 'processing') {
          console.log("Auto-refreshing page to check conversion status");
          window.location.reload();
        }
      }, 30000);
    <% end %>
    
    // Additional fallback: Direct check for completed file
    <% if @conversion.status != 'completed' && @conversion.file_path.present? %>
      setTimeout(function() {
        fetch('/conversions/<%= @conversion.id %>.json?_=' + new Date().getTime())
          .then(response => response.json())
          .then(data => {
            if (data.status === 'completed') {
              window.location.reload();
            }
          }).catch(e => console.error(e));
      }, 5000);
    <% end %>
  });
</script>

<!-- Additional direct polling mechanism as fallback -->
<script>
  <% if @conversion.status != 'completed' %>
  (function() {
    let checkCount = 0;
    const maxChecks = 30; // Check up to 30 times
    
    function checkCompletionStatus() {
      if (checkCount >= maxChecks) return;
      checkCount++;
      
      fetch('/conversions/<%= @conversion.id %>.json?_=' + new Date().getTime())
        .then(response => response.json())
        .then(data => {
          console.log("Direct status check:", data.status);
          
          if (data.status === 'completed') {
            console.log("Conversion complete - updating UI directly");
            document.querySelector('[data-conversion-status-target="statusText"]').textContent = "Completed";
            
            // Show download button
            const downloadBtn = document.querySelector('[data-conversion-status-target="downloadButton"]');
            if (downloadBtn) downloadBtn.classList.remove('hidden');
            
            // Show details panel
            const detailsPanel = document.querySelector('[data-conversion-status-target="details"]');
            if (detailsPanel) detailsPanel.classList.remove('hidden');
            
            // Update title and duration if available
            if (data.title) {
              const titleElement = document.querySelector('[data-conversion-status-target="title"]');
              if (titleElement) titleElement.textContent = data.title;
            }
            
            if (data.duration) {
              const durationElement = document.querySelector('[data-conversion-status-target="duration"]');
              if (durationElement) durationElement.textContent = data.duration;
            }
            
            // Complete progress bar
            const progressBar = document.getElementById('progress-bar');
            if (progressBar) progressBar.style.width = '100%';
            
            // Stop checking
            return;
          }
          
          // Continue checking if not completed
          if (data.status === 'pending' || data.status === 'processing') {
            setTimeout(checkCompletionStatus, 3000); // Check again in 3 seconds
          }
        })
        .catch(e => {
          console.error("Error checking status:", e);
          setTimeout(checkCompletionStatus, 3000); // Try again in 3 seconds
        });
    }
    
    // Start checking after a short delay
    setTimeout(checkCompletionStatus, 5000);
  })();
  <% end %>
</script>