<%# app/views/conversions/index.html.erb %>

<% content_for :title, "YouTube to MP3 Converter - Free Online Audio Extractor" %>
<% content_for :description, "Convert YouTube videos to high-quality MP3 files for free. Choose audio quality up to 320kbps, no registration required." %>

<% content_for :additional_schema do %>
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "How do I convert YouTube videos to MP3?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Simply paste the YouTube URL into the input field above, select your desired audio quality, and click 'Convert'. Once processing is complete, you can download your MP3 file."
        }
      },
      {
        "@type": "Question",
        "name": "What audio quality options are available?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "We offer three quality options: 128kbps (standard quality), 192kbps (high quality), and 320kbps (premium quality). Higher quality means better sound but larger file size."
        }
      },
      {
        "@type": "Question",
        "name": "Is there a limit to how many videos I can convert?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "We implement fair usage limits to ensure our service remains available to everyone. Most users can convert several videos per day without issues."
        }
      },
      {
        "@type": "Question",
        "name": "Is this safe?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Yes 100%. We do not ask you to sign up or download any software prior the download, only clean MP3 files."
        }
      },
      {
        "@type": "Question",
        "name": "Can I convert Youtube playlist videos?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Yes. We specifically designed our converter to handle Youtube playlist videos."
        }
      },
      {
        "@type": "Question",
        "name": "How do I convert YouTube videos or Shorts to MP3?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Simply paste the YouTube URL or YouTube Shorts URL into the input field above, select your desired audio quality, and click 'Convert'. Once processing is complete, you can download your MP3 file."
        }
      }
    ]
  }
  </script>
<% end %>

<div class="max-w-2xl mx-auto">
  <div id="conversion-form-container">
    <%= render 'conversion_form' %>
  </div>
  
  <div id="conversion-status-container" class="hidden">
    <%# Status will be loaded here dynamically %>
  </div>

  <!-- Divider -->
  <div class="relative my-8 flex justify-center">
    <div class="absolute inset-0 flex items-center justify-center">
      <div class="w-20 border-t border-gray-300"></div>
    </div>
    <div class="relative">
      <!-- You can add text here if you want, or leave it empty for just a line -->
    </div>
  </div>

  <div id="how-it-works" class="bg-white shadow-md rounded-lg p-6 mt-8 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">How the Youtube to MP3 Converter Works</h2>
    <ol class="list-decimal list-inside space-y-2 text-gray-700">
      <li>Paste a valid YouTube URL in the field above</li>
      <li>Select your preferred audio quality</li>
      <li>Click "Convert" and wait for processing</li>
      <li>Download your MP3 file when ready</li>
    </ol>
  </div>

  <div id="features" class="bg-white shadow-md rounded-lg p-6 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-8">Features</h2>
    <div class="grid md:grid-cols-3 gap-6">
      <div class="flex flex-col items-center text-center">
        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </div>
        <h3 class="font-medium text-gray-800">Fast Conversion</h3>
        <p class="text-gray-600 mt-2">Convert Youtube videos to MP3 in under 30 seconds.</p>
      </div>
      
      <div class="flex flex-col items-center text-center">
        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
        </div>
        <h3 class="font-medium text-gray-800">High-Quality Audio</h3>
        <p class="text-gray-600 mt-2">Choose audio quality up to 320kbps.</p>
      </div>
      
      <div class="flex flex-col items-center text-center">
        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        </div>
        <h3 class="font-medium text-gray-800">100% Free</h3>
        <p class="text-gray-600 mt-2">No registration or app install required.</p>
      </div>

      <div class="flex flex-col items-center text-center mt-6">
        <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z" />
          </svg>
        </div>
        <h3 class="font-medium text-gray-800">Youtube Shorts Support</h3>
        <p class="text-gray-600 mt-2">Download audio from YouTube Shorts.</p>
      </div>

    </div>
  </div>
  
  <div id="faq" class="bg-white shadow-md rounded-lg p-6 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">FAQs</h2>
    <div class="space-y-4">
      <div>
        <h3 class="font-semibold text-gray-800">How do I convert YouTube videos to MP3?</h3>
        <p class="text-gray-600 mt-1 mb-6">Simply paste the YouTube URL into the input field above, select your desired audio quality, and click "Convert". Once processing is complete, click "Download" to save your MP3 file.</p>
      </div>
      
      <div>
        <h3 class="font-semibold text-gray-800">What audio quality options are available?</h3>
        <p class="text-gray-600 mt-1 mb-6">We offer three quality options: 128kbps (standard quality), 192kbps (high quality), and 320kbps (highest quality). Higher quality means better sound but larger file size.</p>
      </div>
      
      <div>
        <h3 class="font-semibold text-gray-800">Is there a limit to how many videos I can convert?</h3>
        <p class="text-gray-600 mt-1 mb-6">We implement fair usage limits to ensure our service remains available to everyone. Most users can convert several videos per day without issues.</p>
      </div>

      <div>
        <h3 class="font-semibold text-gray-800">Is this safe?</h3>
        <p class="text-gray-600 mt-1 mb-6">Yes 100%. We do not ask you to sign up or download any software prior the download, only clean MP3 files. </p>
      </div>

      <div>
        <h3 class="font-semibold text-gray-800">Can I convert Youtube playlist videos?</h3>
        <p class="text-gray-600 mt-1 mb-6">Yes. We specifically designed our converter to handle Youtube playlist videos. </p>
      </div>

      <div>
        <h3 class="font-semibold text-gray-800">Can I convert YouTube Shorts to MP3?</h3>
        <p class="text-gray-600 mt-1 mb-6">Yes. Our converter fully supports YouTube Shorts. Just paste the Shorts URL (example: https://youtube.com/shorts/ABCDEFGHIJK) into the input field and click "Convert".</p>
      </div>


      <div>
        <h3 class="font-semibold text-gray-800">Are there video length limitations?</h3>
        <p class="text-gray-600 mt-1 mb-6">Yes. We support videos up to 2 hours in length. For videos longer than 1 hour, we automatically adjust the quality to 192 kbps to maintain reasonable file sizes and audio quality</p>
      </div>

    </div>
  </div>


</div>

<script>
  // Keep track of the active conversion ID and any polling intervals
  let activeConversionId = null;
  let pollingInterval = null;
  
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('conversion-form');
    
    // Check for conversion_id in URL and handle it
    const urlParams = new URLSearchParams(window.location.search);
    const conversionId = urlParams.get('conversion_id');
    
    if (conversionId) {
      // Remove the parameter from URL without reloading
      window.history.replaceState({}, document.title, window.location.pathname);
      
      // Load the conversion status if ID is in URL
      fetchAndShowConversionStatus(conversionId);
    }
    
    if (form) {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        
        const formData = new FormData(form);
        const youtubeUrl = formData.get('conversion[url]');
        
        // Validate YouTube URL before submitting (including Shorts)
        const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com\/(watch\?v=|shorts\/)|youtu\.be\/).+/;
        if (!youtubeRegex.test(youtubeUrl)) {
          alert('Please enter a valid YouTube URL or YouTube Shorts URL');
          return; // Stop here and don't proceed with form submission
        }
        
        // Show loading state
        const submitButton = form.querySelector('input[type="submit"]');
        submitButton.value = 'Converting...';
        submitButton.disabled = true;
        
        fetch('/conversions', {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          },
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data);
          if (data.errors) {
            // Handle validation errors from the server
            alert('Error: ' + data.errors.join(', '));
            submitButton.value = 'Convert';
            submitButton.disabled = false;
          } else {
            // Save the active conversion ID
            activeConversionId = data.id;
            
            // Fetch and show the conversion status
            fetchAndShowConversionStatus(data.id);
            
            // Failsafe: If status doesn't load properly in 5 seconds, redirect to show page
            setTimeout(function() {
              const statusContainer = document.getElementById('conversion-status-container');
              if (statusContainer && statusContainer.classList.contains('hidden')) {
                console.log("Status container still hidden after timeout, redirecting to show page");
                window.location.href = `/conversions/${data.id}`;
              }
            }, 5000);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred. Please try again.');
          submitButton.value = 'Convert';
          submitButton.disabled = false;
        });
      });
    }
    
    // Handle "Convert Another Video" links globally
    document.addEventListener('click', function(event) {
      const link = event.target.closest('a[href="/"]');
      if (link) {
        event.preventDefault();
        
        // Stop any active polling
        clearPolling();
        
        // Reset to initial state
        resetToInitialState();
      }
    });
  });
  
  function fetchAndShowConversionStatus(conversionId) {
    console.log(`Fetching status for conversion ${conversionId}`);
    
    fetch(`/conversions/${conversionId}/status`, {
      headers: { 'Cache-Control': 'no-cache' }
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.text();
      })
      .then(html => {
        // Hide the form and show the status
        document.getElementById('conversion-form-container').classList.add('hidden');
        const statusContainer = document.getElementById('conversion-status-container');
        statusContainer.innerHTML = html;
        statusContainer.classList.remove('hidden');
        
        // Important: Check immediately for error messages and make them visible
        const errorMsg = statusContainer.querySelector('[data-conversion-status-target="errorMessage"]');
        if (errorMsg) {
          console.log('Error message container found, making it visible');
          errorMsg.classList.remove('hidden');
          
          // Also ensure the standard "Convert Another" link is hidden if we have an error
          const convertLink = statusContainer.querySelector('#convert-another-link');
          if (convertLink) convertLink.classList.add('hidden');
          
          // No need to start polling or animation for error states
          return;
        }
        
        // Get initial status
        const statusText = document.querySelector('[data-conversion-status-target="statusText"]');
        const initialStatus = statusText ? statusText.textContent.toLowerCase() : 'pending';
        
        console.log('Initial status detected:', initialStatus);
        
        // Special handling for failed status
        if (initialStatus === 'failed') {
          console.log('Failed status detected on initial load');
          
          // Force a reload of the status partial to ensure error is shown
          reloadStatusPartial(conversionId);
          
          // No need to start polling or animation
          return;
        }
        
        // Start polling for status updates if not failed or completed
        if (initialStatus !== 'failed' && initialStatus !== 'completed') {
          startPolling(conversionId);
        }
        
        // Add backup mechanism for very long conversions
        const maxWaitTime = 600000; // 10 minutes
        setTimeout(() => {
          checkFinalStatus(conversionId);
        }, maxWaitTime);
      })
      .catch(error => {
        console.error('Status fetch error:', error);
        
        // Show error and redirect to the show page for the conversion
        alert(`Error loading conversion status: ${error.message}. Redirecting to conversion page...`);
        window.location.href = `/conversions/${conversionId}`;
      });
  }
  
  // Helper function to reload just the status partial
  function reloadStatusPartial(conversionId) {
    console.log(`Reloading status partial for conversion ${conversionId}`);
    fetch(`/conversions/${conversionId}/status?_=${new Date().getTime()}`, {
      headers: { 'Cache-Control': 'no-cache' }
    })
      .then(response => response.text())
      .then(html => {
        const statusContainer = document.getElementById('conversion-status-container');
        statusContainer.innerHTML = html;
        
        // Ensure error message is visible if present
        const errorMsg = statusContainer.querySelector('[data-conversion-status-target="errorMessage"]');
        if (errorMsg) {
          console.log("Found error message container after reload, ensuring visibility");
          errorMsg.classList.remove('hidden');
        }
      })
      .catch(error => console.error("Error reloading status:", error));
  }
  
  function startPolling(conversionId) {
    // Clear any existing polling
    clearPolling();
    
    // Start with more frequent checks initially (every 1 second for the first 15 seconds)
    // This helps catch copyright issues faster
    let checkCount = 0;
    const initialInterval = 1000; // 1 second
    const regularInterval = 3000; // 3 seconds
    let currentInterval = initialInterval;
    
    // Set up new polling
    pollingInterval = setInterval(() => {
      checkConversionStatus(conversionId);
      
      // After 15 checks (15 seconds), switch to slower polling
      checkCount++;
      if (checkCount === 15) {
        clearInterval(pollingInterval);
        pollingInterval = setInterval(() => {
          checkConversionStatus(conversionId);
        }, regularInterval);
      }
    }, initialInterval);
    
    // Add safety timeout to stop polling after 10 minutes
    setTimeout(() => {
      clearPolling();
      console.log("Safety timeout reached, stopping polling");
      
      // Add a final check
      checkConversionStatus(conversionId);
    }, 600000); // 10 minutes
  }
  
  function checkConversionStatus(conversionId) {
    console.log(`Checking status for conversion: ${conversionId}`);
    
    // Add cache-busting and no-cache headers
    fetch(`/conversions/${conversionId}.json?nocache=${new Date().getTime()}`, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
      .then(response => response.json())
      .then(data => {
        console.log("Status received:", data.status, "Error:", data.error_message);
        
        // Normalize status to lowercase for consistent comparison
        // Use toString() to handle potential null values
        const status = (data.status || "").toString().toLowerCase();
        
        // Check for failed status immediately (case insensitive)
        if (status === 'failed') {
          console.log("Conversion failed, updating UI immediately...");
          
          // For failed status, completely reload the status partial
          // This is more reliable than trying to update individual elements
          clearPolling();
          
          // Reload the entire partial instead of manipulating DOM elements
          reloadStatusPartial(conversionId);
          return;
        }
        
        // For non-failed statuses, update normally
        updateStatusUI(data);
        
        // If completed, stop polling
        if (status === 'completed') {
          clearPolling();
        }
      })
      .catch(error => {
        console.error("Error checking status:", error);
        // Continue polling despite errors
      });
  }
  
  function updateStatusUI(data) {
    // Normalize status for consistent handling
    const status = (data.status || "").toString().toLowerCase();

    // Update the status text - important to maintain case consistency
    const statusText = document.querySelector('[data-conversion-status-target="statusText"]');
    if (statusText) {
      statusText.textContent = capitalizeFirstLetter(status);
    }
    
    // Update progress container class for processing state
    const progressContainer = document.querySelector('.progress-container');
    if (progressContainer) {
      if (status === 'processing') {
        progressContainer.classList.add('processing');
      } else {
        progressContainer.classList.remove('processing');
      }
    }
    
    // For completed status, immediately show 100% before showing download button
    if (status === 'completed') {
      // First update progress to 100%
      const progressBar = document.getElementById('progress-bar');
      if (progressBar) {
        progressBar.style.transition = 'width 0.5s ease-out';
        progressBar.style.width = '100%';
      }
      
      // Show download button
      const downloadBtn = document.querySelector('[data-conversion-status-target="downloadButton"]');
      if (downloadBtn) {
        downloadBtn.classList.remove('hidden');
      }
      
      // Show details
      const detailsPanel = document.querySelector('[data-conversion-status-target="details"]');
      if (detailsPanel) {
        detailsPanel.classList.remove('hidden');
        
        // Update title and duration
        const titleElement = document.querySelector('[data-conversion-status-target="title"]');
        if (titleElement && data.title) {
          titleElement.textContent = data.title;
        }
        
        const durationElement = document.querySelector('[data-conversion-status-target="duration"]');
        if (durationElement && data.duration) {
          durationElement.textContent = data.duration;
        }
      }
    }
  }
  
  function checkFinalStatus(conversionId) {
    console.log("Performing final status check after max wait time");
    
    fetch(`/conversions/${conversionId}.json?_=${new Date().getTime()}`, {
      headers: {
        'Cache-Control': 'no-cache'
      }
    })
    .then(response => response.json())
    .then(data => {
      // Normalize status to handle potential null values
      const status = (data.status || "").toString().toLowerCase();
      
      console.log("Final status check result:", status, data.error_message);
      
      // If status is failed, force a reload of the partial
      if (status === 'failed') {
        console.log("Final check detected failed status, reloading partial");
        clearPolling();
        reloadStatusPartial(conversionId);
      }
      // For completed status, update the UI
      else if (status === 'completed') {
        console.log("Backup check: Conversion is actually complete - updating UI");
        
        // Update UI to show completed
        const statusText = document.querySelector('[data-conversion-status-target="statusText"]');
        if (statusText) statusText.textContent = "Completed";
        
        // Update progress bar to 100% - force instant update
        const progressBar = document.getElementById('progress-bar');
        if (progressBar) {
          progressBar.style.transition = 'width 0.5s ease-out';
          progressBar.style.width = '100%';
        }
        
        // Show download button
        const downloadBtn = document.querySelector('[data-conversion-status-target="downloadButton"]');
        if (downloadBtn) downloadBtn.classList.remove('hidden');
      }
    })
    .catch(error => console.error("Error in final check:", error));
  }
  
  function capitalizeFirstLetter(string) {
    if (!string) return '';
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  
  function clearPolling() {
    if (pollingInterval) {
      clearInterval(pollingInterval);
      pollingInterval = null;
    }
  }
  
  function resetToInitialState() {
    // Hide status container and show form container
    document.getElementById('conversion-status-container').classList.add('hidden');
    document.getElementById('conversion-status-container').innerHTML = '';
    document.getElementById('conversion-form-container').classList.remove('hidden');
    
    // Reset the form
    const form = document.getElementById('conversion-form');
    if (form) {
      form.reset();
      
      const submitButton = form.querySelector('input[type="submit"]');
      if (submitButton) {
        submitButton.value = 'Convert';
        submitButton.disabled = false;
      }
    }
    
    // Reset active conversion ID
    activeConversionId = null;
  }
</script>